---
- name: Ensuring config directories exist
  become: true
  file:
    path: "{{ node_config_directory }}/{{ item.key }}"
    state: "directory"
    owner: "{{ config_owner_user }}"
    group: "{{ config_owner_group }}"
    mode: "0770"
  when:
    - inventory_hostname in groups[item.value.group]
    - item.value.enabled | bool
  with_dict: "{{ prometheus_services }}"

- name: Ensuring process exporter config directories exist
  file:
    path: "{{ node_config_directory }}/prometheus-process-exporter/"
    state: "directory"
    owner: "{{ config_owner_user }}"
    group: "{{ config_owner_group }}"
    mode: "0770"
  become: true
  when:
    - inventory_hostname in groups['prometheus-process-exporter']
    - enable_prometheus_process_exporter | bool

- name: Installing bc package
  package:
    name: "bc"
    state: present
  become: True

- name: Copying over dmesg text file collector
  copy:
    src: "{{ node_custom_config }}/host_cron/dmesg_textfile_collector.sh"
    dest: "{{ node_config_directory }}/cron/host_cron/dmesg_textfile_collector.sh"
  when:
    - enable_host_cron | bool
    - inventory_hostname in groups[item]
  with_items: "{{ dmesg_group_list }}"

- name: dmesg textfile_collector
  cron:
    name: "dmesg collector"
    user: "{{ config_owner_user }}"
    job: "bash {{ node_config_directory }}/cron/host_cron/dmesg_textfile_collector.sh > /textfile_collector/dmesg_textfile_collector.prom"
    cron_file: "dmesg_textfile_collector"
  become: true
  when:
    - inventory_hostname in groups[item]
    - enable_host_cron | bool
  with_items: "{{ dmesg_group_list }}"

- name: Copying over multipath_failed host_cron cron config files
  copy:
    src: "{{ node_custom_config }}/host_cron/multipath_failed.sh"
    dest: "{{ node_config_directory }}/cron/host_cron/multipath_failed.sh"
  when:
    - enable_host_cron | bool
    - inventory_hostname in groups['multipathd']

- name: Multipath failed faulty textfile_collector
  cron:
    name: "monitor path failed faulty"
    user: "{{ config_owner_user }}"
    job: "bash {{ node_config_directory }}/cron/host_cron/multipath_failed.sh > /textfile_collector/multipath_failed_faulty.prom"
    cron_file: "multipath_failed_textfile_collector"
    minute: "*/30"
  become: true
  when:
    - inventory_hostname in groups['multipathd']
    - enable_host_cron | bool

- name: Copying over hba_port_collector host_cron config files
  copy:
    src: "{{ node_custom_config }}/host_cron/hba_port_collector.sh"
    dest: "{{ node_config_directory }}/cron/host_cron/hba_port_collector.sh"
  when:
    - enable_host_cron | bool
    - inventory_hostname in groups['multipathd']

- name: Set crontab for hba_port_collector script
  cron:
    name: "monitor hba port state and speed"
    user: "{{ config_owner_user }}"
    job: "bash {{ node_config_directory }}/cron/host_cron/hba_port_collector.sh > /textfile_collector/hba_port_collector.prom"
    cron_file: "hba_port_collector"
    minute: "*/10"
  become: true
  when:
    - inventory_hostname in groups['multipathd']
    - enable_host_cron | bool

- name: Installing smartmontools package
  package:
    name: "smartmontools"
    state: present
  become: True
  when:
    - inventory_hostname in groups[item]
  with_items: "{{ smartmon_group_list }}"

- name: Copying over smartmon host_cron cron config files
  copy:
    src: "{{ node_custom_config }}/host_cron/smartmon.sh"
    dest: "{{ node_config_directory }}/cron/host_cron/smartmon.sh"
  when:
    - enable_host_cron | bool
    - inventory_hostname in groups[item]
  with_items: "{{ smartmon_group_list }}"

- name: smartmon textfile_collector
  cron:
    name: "smartmon collector"
    user: "{{ config_owner_user }}"
    job: "bash {{ node_config_directory }}cron/host_cron/smartmon.sh > /textfile_collector/smart_metrics.prom"
    cron_file: "smartmon"
    minute: "*/30"
  become: true
  when:
    - inventory_hostname in groups[item]
    - enable_host_cron | bool
  with_items: "{{ smartmon_group_list }}"

- name: Remount /sys/fs/cgroup
  command: mount -o remount,rw '/sys/fs/cgroup'
  become: true
  register: remount_cgroup
  failed_when: remount_cgroup.rc > 1
  when:
    - inventory_hostname in groups['prometheus-cadvisor']
  notify:
    - Restart prometheus-cadvisor container

- name: Create symbol link between /sys/fs/cgroup/cpu,cpuacct and /sys/fs/cgroup/cpuacct,cpu
  become: true
  command: ln -sf /sys/fs/cgroup/cpu,cpuacct /sys/fs/cgroup/cpuacct,cpu
  ignore_errors: yes
  when:
    - inventory_hostname in groups['prometheus-cadvisor']
  notify:
    - Restart prometheus-cadvisor container

- name: Mount /sys/fs/cgroup on startup
  lineinfile:
    path: /etc/rc.local
    line: "mount -o remount,rw '/sys/fs/cgroup' && ln -sf /sys/fs/cgroup/cpu,cpuacct /sys/fs/cgroup/cpuacct,cpu"
  become: true

- name: Copying over config.json files
  become: true
  template:
    src: "{{ item.key }}.json.j2"
    dest: "{{ node_config_directory }}/{{ item.key }}/config.json"
    mode: "0660"
  when:
    - inventory_hostname in groups[item.value.group]
    - item.value.enabled | bool
  with_dict: "{{ prometheus_services }}"
  notify:
    - Restart {{ item.key }} container

- name: Find custom prometheus alert rules files
  become: true
  local_action:
    module: find
    path: "{{ node_custom_config }}/prometheus/"
    pattern: "*.rules"
  run_once: True
  register: prometheus_alert_rules
  when:
    - enable_prometheus_alertmanager | bool

- name: Copying over custom prometheus alert rules files
  become: true
  vars:
    service: "{{ prometheus_services['prometheus-server']}}"
  copy:
    src: "{{ item.path }}"
    dest: "{{ node_config_directory }}/prometheus-server/{{ item.path | basename }}"
    mode: "0660"
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool and enable_prometheus_alertmanager | bool
    - prometheus_alert_rules is defined and prometheus_alert_rules.files | length > 0
  with_items: "{{ prometheus_alert_rules.files }}"
  notify:
    - Restart prometheus-server container

- name: Copying over prometheus config file
  become: true
  vars:
    service: "{{ prometheus_services['prometheus-server']}}"
  template:
    src: "{{ item }}"
    dest: "{{ node_config_directory }}/prometheus-server/prometheus.yml"
    mode: "0660"
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  with_first_found:
    - "{{ node_custom_config }}/prometheus/{{ inventory_hostname }}/prometheus.yml"
    - "{{ node_custom_config }}/prometheus/prometheus.yml"
    - "{{ role_path }}/templates/prometheus.yml.j2"
  notify:
    - Restart prometheus-server container

- name: Copying over prometheus alertmanager config file
  become: true
  vars:
    service: "{{ prometheus_services['prometheus-alertmanager']}}"
  template:
    src: "{{ item }}"
    dest: "{{ node_config_directory }}/prometheus-alertmanager/prometheus-alertmanager.yml"
    mode: "0660"
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  with_first_found:
    - "{{ node_custom_config }}/prometheus/{{ inventory_hostname }}/prometheus-alertmanager.yml"
    - "{{ node_custom_config }}/prometheus/prometheus-alertmanager.yml"
    - "{{ role_path }}/templates/prometheus-alertmanager.yml.j2"
  notify:
    - Restart prometheus-alertmanager container

- name: Copying over my.cnf for mysqld_exporter
  become: true
  vars:
    service: "{{ prometheus_services['prometheus-mysqld-exporter']}}"
  merge_configs:
    sources:
      - "{{ node_custom_config }}/prometheus-mysqld-exporter/{{ inventory_hostname }}/my.cnf"
      - "{{ node_custom_config }}/prometheus-mysqld-exporter/my.cnf"
      - "{{ role_path }}/templates/my.cnf.j2"
    dest: "{{ node_config_directory }}/prometheus-mysqld-exporter/my.cnf"
    mode: "0660"
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  notify:
    - Restart prometheus-mysqld-exporter container

- name: Find process exporter config file
  local_action:
    module: find
    path: "{{ node_custom_config }}/prometheus/"
    pattern: "process_exporter.yml"
  run_once: True
  register: prometheus_process_exporter
  when:
    - enable_prometheus_process_exporter | bool

- name: Copying over process_exporter.yml file for process exporter
  copy:
    src: "{{ node_custom_config }}/prometheus/process_exporter.yml"
    dest: "{{ node_config_directory }}/prometheus-process-exporter/process_exporter.yml"
    mode: "0770"
  register: prometheus_process_exporter_conf
  when:
    - inventory_hostname in groups['prometheus-process-exporter']
    - enable_prometheus_process_exporter | bool
    - prometheus_process_exporter is defined and prometheus_process_exporter.files | length > 0
  notify:
    - Restart prometheus-process-exporter container

- name: Copying cloud config file for openstack exporter
  become: true
  vars:
    service: "{{ prometheus_services['prometheus-openstack-exporter'] }}"
  template:
    src: "{{ item }}"
    dest: "{{ node_config_directory }}/prometheus-openstack-exporter/clouds.yml"
    mode: "0660"
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  with_first_found:
    - "{{ node_custom_config }}/prometheus-openstack-exporter/{{ inventory_hostname }}/clouds.yml"
    - "{{ node_custom_config }}/prometheus-openstack-exporter/clouds.yml"
    - "{{ role_path }}/templates/clouds.yml.j2"
  notify:
    - Restart prometheus-openstack-exporter container

- name: Start rabbitmq-exporter container
  become: true
  docker_container:
    name: prometheus_rabbitmq_exporter
    image: "{{ prometheus_rabbitmq_exporter_image_full }}"
    state: started
    restart_policy: always
    network_mode: "host"
    env:
      RABBIT_TIMEOUT: "{{ rabbitmq_timeout }}"
      RABBIT_URL: "http://{{ kolla_internal_vip_address }}:{{ rabbitmq_management_port }}"
      RABBIT_USER: "openstack"
      RABBIT_PASSWORD: "{{ rabbitmq_password }}"
      PUBLISH_PORT: "{{ prometheus_rabbitmq_exporter_port }}"
      PUBLISH_ADDR: "{{ hostvars[inventory_hostname]['ansible_' + hostvars[inventory_hostname]['external_interface']]['ipv4']['address'] }}" # Bind the external only
      RABBIT_EXPORTERS: "{{ rabbitmq_exporters }}"
      EXCLUDE_METRICS: "{{ rabbitmq_exclude_metrics }}"
  when:
    - kolla_action != "config"
    - enable_prometheus_rabbitmq_exporter | bool
    - inventory_hostname in groups['prometheus-rabbitmq-exporter']

- name: Copying config file for blackbox exporter
  become: true
  vars:
    service: "{{ prometheus_services['prometheus-blackbox-exporter'] }}"
  template:
    src: "{{ item }}"
    dest: "{{ node_config_directory }}/prometheus-blackbox-exporter/prometheus-blackbox-exporter.yml"
    mode: "0660"
  when:
    - inventory_hostname in groups[service.group]
    - service.enabled | bool
  with_first_found:
    - "{{ node_custom_config }}/prometheus/{{ inventory_hostname }}/prometheus-blackbox-exporter.yml"
    - "{{ node_custom_config }}/prometheus/prometheus-blackbox-exporter.yml"
    - "{{ role_path }}/templates/prometheus-blackbox-exporter.yml.j2"
  notify:
    - Restart prometheus-blackbox-exporter container

# NOTE(ducnv41): Use external image.
# Image source: http://10.240.203.2:8180/cloud-team/prometheus-exporters/libvirt-exporter
# NOTE(ducnv41): --cpu-period="100000" and --cpu-quota="150000" is the equivalent --cpus="1.5"
- name: Start prometheus-libvirt-exporter container
  become: True
  docker_container:
    name: prometheus_libvirt_exporter
    image: "{{ prometheus_libvirt_exporter_image_full }}"
    state: started
    restart_policy: unless-stopped
    memory: "{{ prometheus_libvirt_exporter_mem_limit }}}"
    cpu_period: 100000
    cpu_quota: 150000
    ports:
      - "{{ external_interface_address }}:{{ prometheus_libvirt_exporter_port }}:9177"
    volumes:
      - "/var/run/libvirt/:/var/run/libvirt/:ro"
  when:
    - kolla_action != "config"
    - enable_prometheus_libvirt_exporter | bool
    - inventory_hostname in groups['prometheus-libvirt-exporter']

# NOTE(donghm): Use external container.
# Container source: https://github.com/ncabatoff/process-exporter
#
# This task's here to check if the port change but config file doesn't change
# then recreate container
- name: Start prometheus-process-exporter container
  become: True
  docker_container:
    name: prometheus_process_exporter
    image: "{{ prometheus_process_exporter_image_full }}"
    state: started
    restart_policy: on-failure
    network_mode: "host"
    privileged: yes
    volumes:
      - "/proc:/host/proc"
      - "{{ node_config_directory }}/prometheus-process-exporter/:/config"
    command:
      - "--procfs /host/proc -config.path /config/process_exporter.yml -web.listen-address :{{ prometheus_process_exporter_port }}"
  when:
    - kolla_action != "config"
    - enable_prometheus_process_exporter | bool
    - inventory_hostname in groups['prometheus-process-exporter']

- name: Start prometheus-container-status-exporter container
  become: True
  docker_container:
    name: prometheus_container_status_exporter
    image: "{{ prometheus_container_status_exporter_image_full }}"
    state: started
    recreate: yes
    restart_policy: unless-stopped
    network_mode: "host"
    volumes:
      - "/etc/hosts:/etc/hosts:ro"
      - "kolla_logs:/var/log/kolla/"
      - "/etc/localtime:/etc/localtime:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    command:
      - "--port {{ prometheus_container_status_exporter_port }}"
  when:
    - kolla_action != "config"
    - enable_prometheus_container_status_exporter | bool
    - inventory_hostname in groups['prometheus-container-status-exporter']

- include_tasks: check-containers.yml
  when: kolla_action != "config"
